import React, { useEffect, useState } from 'react';
import { FormControl, InputLabel, Select, MenuItem, Box } from '@mui/material';

const VoiceSelector = ({ onLanguageSelect, onVoiceSelect }) => {
  const [languages, setLanguages] = useState([]);
  const [voices, setVoices] = useState([]);
  const [selectedLanguage, setSelectedLanguage] = useState('en-US');
  const [selectedVoice, setSelectedVoice] = useState('');

  // Updated list of available languages with emoji flags
  const languageOptions = {
    'af-ZA': 'Afrikaans (South Africa) ðŸ‡¿ðŸ‡¦',
    'am-ET': 'Amharic (Ethiopia) ðŸ‡ªðŸ‡¹',
    'bg-BG': 'Bulgarian (Bulgaria) ðŸ‡§ðŸ‡¬',
    'bn-IN': 'Bengali (India) ðŸ‡®ðŸ‡³',
    'ca-ES': 'Catalan (Spain) ðŸ‡ªðŸ‡¸',
    'cmn-Hans-CN': 'Chinese (Simplified) ðŸ‡¨ðŸ‡³',
    'cmn-Hant-TW': 'Chinese (Traditional) ðŸ‡¹ðŸ‡¼',
    'cs-CZ': 'Czech (Czech Republic) ðŸ‡¨ðŸ‡¿',
    'da-DK': 'Danish (Denmark) ðŸ‡©ðŸ‡°',
    'de-DE': 'German (Germany) ðŸ‡©ðŸ‡ª',
    'el-GR': 'Greek (Greece) ðŸ‡¬ðŸ‡·',
    'en-GB': 'English (United Kingdom) ðŸ‡¬ðŸ‡§',
    'en-IN': 'English (India) ðŸ‡®ðŸ‡³',
    'en-US': 'English (United States) ðŸ‡ºðŸ‡¸',
    'es-ES': 'Spanish (Spain) ðŸ‡ªðŸ‡¸',
    'es-US': 'Spanish (United States) ðŸ‡ºðŸ‡¸',
    'eu-ES': 'Basque (Spain) ðŸ‡ªðŸ‡¸',
    'fi-FI': 'Finnish (Finland) ðŸ‡«ðŸ‡®',
    'fil-PH': 'Filipino (Philippines) ðŸ‡µðŸ‡­',
    'fr-FR': 'French (France) ðŸ‡«ðŸ‡·',
    'gl-ES': 'Galician (Spain) ðŸ‡ªðŸ‡¸',
    'gu-IN': 'Gujarati (India) ðŸ‡®ðŸ‡³',
    'he-IL': 'Hebrew (Israel) ðŸ‡®ðŸ‡±',
    'hi-IN': 'Hindi (India) ðŸ‡®ðŸ‡³',
    'hu-HU': 'Hungarian (Hungary) ðŸ‡­ðŸ‡º',
    'id-ID': 'Indonesian (Indonesia) ðŸ‡®ðŸ‡©',
    'is-IS': 'Icelandic (Iceland) ðŸ‡®ðŸ‡¸',
    'it-IT': 'Italian (Italy) ðŸ‡®ðŸ‡¹',
    'ja-JP': 'Japanese (Japan) ðŸ‡¯ðŸ‡µ',
    'kn-IN': 'Kannada (India) ðŸ‡®ðŸ‡³',
    'ko-KR': 'Korean (South Korea) ðŸ‡°ðŸ‡·',
    'lt-LT': 'Lithuanian (Lithuania) ðŸ‡±ðŸ‡¹',
    'lv-LV': 'Latvian (Latvia) ðŸ‡±ðŸ‡»',
    'ml-IN': 'Malayalam (India) ðŸ‡®ðŸ‡³',
    'mr-IN': 'Marathi (India) ðŸ‡®ðŸ‡³',
    'ms-MY': 'Malay (Malaysia) ðŸ‡²ðŸ‡¾',
    'nb-NO': 'Norwegian (BokmÃ¥l, Norway) ðŸ‡³ðŸ‡´',
    'nl-BE': 'Dutch (Belgium) ðŸ‡§ðŸ‡ª',
    'nl-NL': 'Dutch (Netherlands) ðŸ‡³ðŸ‡±',
    'pa-IN': 'Punjabi (India) ðŸ‡®ðŸ‡³',
    'pl-PL': 'Polish (Poland) ðŸ‡µðŸ‡±',
    'pt-BR': 'Portuguese (Brazil) ðŸ‡§ðŸ‡·',
    'pt-PT': 'Portuguese (Portugal) ðŸ‡µðŸ‡¹',
    'ro-RO': 'Romanian (Romania) ðŸ‡·ðŸ‡´',
    'ru-RU': 'Russian (Russia) ðŸ‡·ðŸ‡º',
    'sk-SK': 'Slovak (Slovakia) ðŸ‡¸ðŸ‡°',
    'sr-RS': 'Serbian (Serbia) ðŸ‡·ðŸ‡¸',
    'sv-SE': 'Swedish (Sweden) ðŸ‡¸ðŸ‡ª',
    'ta-IN': 'Tamil (India) ðŸ‡®ðŸ‡³',
    'te-IN': 'Telugu (India) ðŸ‡®ðŸ‡³',
    'th-TH': 'Thai (Thailand) ðŸ‡¹ðŸ‡­',
    'tr-TR': 'Turkish (Turkey) ðŸ‡¹ðŸ‡·',
    'uk-UA': 'Ukrainian (Ukraine) ðŸ‡ºðŸ‡¦',
    'ur-IN': 'Urdu (India) ðŸ‡®ðŸ‡³',
    'vi-VN': 'Vietnamese (Vietnam) ðŸ‡»ðŸ‡³',
    'yue-HK': 'Cantonese (Hong Kong) ðŸ‡­ðŸ‡°',
  };

  useEffect(() => {
    setLanguages(Object.entries(languageOptions).map(([code, label]) => ({ code, label })));
    fetchVoices(selectedLanguage); // eslint-disable-next-line
  }, [selectedLanguage]);

  const fetchVoices = async (language) => {
    // Fetch available voices for the selected language from Google TTS API
    try {
      const response = await fetch(`https://texttospeech.googleapis.com/v1/voices?key=${process.env.REACT_APP_GOOGLE_API_KEY}`);
      const data = await response.json();
      const filteredVoices = data.voices.filter(voice => voice.languageCodes.includes(language));
      setVoices(filteredVoices);
    } catch (error) {
      console.error('Error fetching voices:', error);
    }
  };

  const handleLanguageChange = (event) => {
    const language = event.target.value;
    setSelectedLanguage(language);
    onLanguageSelect(language); // Notify parent about language change
    setSelectedVoice(''); // Reset selected voice when language changes
    onVoiceSelect(''); // Clear the voice in parent
    fetchVoices(language); // Fetch voices for new language
  };

  const handleVoiceChange = (event) => {
    const voice = event.target.value;
    setSelectedVoice(voice);
    onVoiceSelect(voice); // Notify parent about voice change
  };

  return (
    <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: 2 }}>
      <FormControl fullWidth margin="normal">
        <InputLabel>Language</InputLabel>
        <Select value={selectedLanguage} onChange={handleLanguageChange}>
          {languages.map(lang => (
            <MenuItem key={lang.code} value={lang.code}>{lang.label}</MenuItem>
          ))}
        </Select>
      </FormControl>
      <FormControl fullWidth margin="normal">
        <InputLabel>Voice</InputLabel>
        <Select value={selectedVoice} onChange={handleVoiceChange} disabled={!voices.length}>
          {voices.map(voice => (
            <MenuItem key={voice.name} value={voice.name}>
              {`${voice.name} (${voice.ssmlGender})`} {/* Display name and gender */}
            </MenuItem>
          ))}
        </Select>
      </FormControl>
    </Box>
  );
};

export default VoiceSelector;
